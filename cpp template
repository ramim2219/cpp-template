#include <bits/stdc++.h>
using namespace std;
using ll = long long;
using vi = vector<int>;
using vll = vector<ll>;
using vvi = vector<vi>;

#define fast_io ios::sync_with_stdio(0); cin.tie(0);
#define pb push_back
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define sz(x) (int)x.size()
#define f(i,a,b) for(int i=a;i<b;i++)

// Constants
const int MOD = 1e9 + 7;
const int INF = 1e9;
const ll LINF = 1e18;

// Utility functions
ll gcd(ll a, ll b) { return b ? gcd(b, a % b) : a; }
ll lcm(ll a, ll b) { return (a / gcd(a, b)) * b; }

// Modular Arithmetic Functions
ll mod_exp(ll a, ll b, ll m) {
    ll res = 1;
    while (b) {
        if (b & 1) res = res * a % m;
        a = a * a % m;
        b >>= 1;
    }
    return res;
}

ll mod_inv(ll a, ll m) {
    // Assuming m is prime; otherwise use extended GCD method
    return mod_exp(a, m - 2, m);
}

// Extended GCD to find modular inverse when MOD is not prime
pair<ll, ll> extended_gcd(ll a, ll b) {
    if (b == 0) return {1, 0};
    auto [x1, y1] = extended_gcd(b, a % b);
    return {y1, x1 - y1 * (a / b)};
}

ll mod_inv_non_prime(ll a, ll m) {
    auto [x, y] = extended_gcd(a, m);
    return (x % m + m) % m; // Ensuring positive result
}

// Number Theory
vector<int> sieve(int n) {
    vector<int> primes;
    vector<bool> is_prime(n + 1, true);
    for (int i = 2; i <= n; i++) {
        if (is_prime[i]) {
            primes.push_back(i);
            for (int j = i * 2; j <= n; j += i)
                is_prime[j] = false;
        }
    }
    return primes;
}

// Graph Algorithms
void bfs(int start, const vvi& adj, vi& dist) {
    queue<int> q;
    q.push(start);
    dist[start] = 0;
    while (!q.empty()) {
        int u = q.front();
        q.pop();
        for (int v : adj[u]) {
            if (dist[v] == -1) {
                dist[v] = dist[u] + 1;
                q.push(v);
            }
        }
    }
}

void dfs(int u, const vvi& adj, vi& visited) {
    visited[u] = 1;
    for (int v : adj[u])
        if (!visited[v])
            dfs(v, adj, visited);
}

// Dijkstraâ€™s Algorithm
void dijkstra(int start, const vector<vector<pair<int, int>>>& adj, vi& dist) {
    dist[start] = 0;
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    pq.push({0, start});
    while (!pq.empty()) {
        auto [d, u] = pq.top(); pq.pop();
        if (d > dist[u]) continue;
        for (auto [v, w] : adj[u]) {
            if (dist[u] + w < dist[v]) {
                dist[v] = dist[u] + w;
                pq.push({dist[v], v});
            }
        }
    }
}

// Floyd-Warshall Algorithm
void floydWarshall(vector<vector<ll>>& dist) {
    int n = dist.size();
    for (int k = 0; k < n; ++k)
        for (int i = 0; i < n; ++i)
            for (int j = 0; j < n; ++j)
                if (dist[i][k] < LINF && dist[k][j] < LINF)
                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]);
}

// Dynamic Programming
// Example: 0-1 Knapsack
int knapsack(const vi& weights, const vi& values, int W) {
    int n = sz(weights);
    vector<vector<int>> dp(n + 1, vector<int>(W + 1, 0));
    for (int i = 1; i <= n; i++) {
        for (int w = 0; w <= W; w++) {
            if (weights[i-1] <= w)
                dp[i][w] = max(dp[i-1][w], dp[i-1][w - weights[i-1]] + values[i-1]);
            else
                dp[i][w] = dp[i-1][w];
        }
    }
    return dp[n][W];
}

// Longest Common Subsequence
int lcs(const string& a, const string& b) {
    int n = sz(a), m = sz(b);
    vector<vector<int>> dp(n + 1, vector<int>(m + 1, 0));
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= m; j++) {
            if (a[i-1] == b[j-1])
                dp[i][j] = dp[i-1][j-1] + 1;
            else
                dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
        }
    }
    return dp[n][m];
}

// Example of Segment Tree (for range sum query)
class SegmentTree {
    vi tree;
    int n;
public:
    SegmentTree(int size) : n(size), tree(4 * size, 0) {}
    void build(const vi& arr, int v, int tl, int tr) {
        if (tl == tr)
            tree[v] = arr[tl];
        else {
            int tm = (tl + tr) / 2;
            build(arr, v*2, tl, tm);
            build(arr, v*2+1, tm+1, tr);
            tree[v] = tree[v*2] + tree[v*2+1];
        }
    }
    int sum(int v, int tl, int tr, int l, int r) {
        if (l > r) return 0;
        if (l == tl && r == tr) return tree[v];
        int tm = (tl + tr) / 2;
        return sum(v*2, tl, tm, l, min(r, tm)) +
               sum(v*2+1, tm+1, tr, max(l, tm+1), r);
    }
    void update(int v, int tl, int tr, int pos, int new_val) {
        if (tl == tr)
            tree[v] = new_val;
        else {
            int tm = (tl + tr) / 2;
            if (pos <= tm)
                update(v*2, tl, tm, pos, new_val);
            else
                update(v*2+1, tm+1, tr, pos, new_val);
            tree[v] = tree[v*2] + tree[v*2+1];
        }
    }
};

int main() {
    fast_io;
    // Example usage
    // Solve your problem here
    return 0;
}
