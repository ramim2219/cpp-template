#include <bits/stdc++.h>
using namespace std;
using ll = long long;
using vi = vector<int>;
using vll = vector<ll>;
using vvi = vector<vi>;

#define fast_io ios::sync_with_stdio(0); cin.tie(0);
#define pb push_back
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define sz(x) (int)x.size()
#define f(i,a,b) for(int i=a;i<b;i++)

const int MOD = 1e9 + 7;
const int INF = 1e9;

// Sort functions
template <typename T>
void sort_vector(vector<T>& v) {
    sort(all(v));
}

template <typename T>
void sort_array(T arr[], int n) {
    sort(arr, arr + n);
}

template <typename K, typename V>
vector<pair<K, V>> sort_map_by_key(const map<K, V>& m) {
    vector<pair<K, V>> v(all(m));
    sort(all(v), [](const pair<K, V>& a, const pair<K, V>& b) {
        return a.first < b.first;
    });
    return v;
}

void sort_map_by_value_desc(const map<ll, ll>& m, vector<pair<ll, ll>>& sorted) {
    sorted.assign(m.begin(), m.end());
    sort(sorted.begin(), sorted.end(), [](const pair<ll, ll>& a, const pair<ll, ll>& b) {
        return a.second > b.second;
    });
}

template <typename K, typename V>
vector<pair<K, V>> sort_map_by_value(const map<K, V>& m) {
    vector<pair<K, V>> v(all(m));
    sort(all(v), [](const pair<K, V>& a, const pair<K, V>& b) {
        return a.second < b.second;
    });
    return v;
}

// String utilities
void string_operations(string& s) {
    cout << "Original string: " << s << "\n";
    s.insert(2, "xyz"); // Insert "xyz" at position 2
    cout << "After insert: " << s << "\n";
    s.erase(2, 3);      // Erase 3 characters from position 2
    cout << "After erase: " << s << "\n";
    cout << "Substring (1,3): " << s.substr(1, 3) << "\n"; // Substring from index 1 with length 3
}

// Vector utilities
void vector_operations() {
    vi vec = {10, 20, 30, 40};
    vec.pb(50); // Push
    vec.pop_back(); // Pop
    vec.insert(vec.begin(), 5); // Insert
    vec.erase(vec.begin() + 1); // Erase second element
    for (int x : vec) cout << x << " "; // Traverse
    cout << "\n";
}

// Set utilities
void set_operations() {
    set<int> s = {5, 2, 9, 1};
    s.insert(7); // Insert
    s.erase(9); // Erase element
    cout << "Set traversal: ";
    for (int x : s) cout << x << " "; // Traverse
    cout << "\n";
}

// Pair utilities
void pair_operations() {
    pair<int, string> p = {1, "one"};
    cout << "Pair: (" << p.first << ", " << p.second << ")\n";
}

// Map utilities
void map_operations() {
    map<int, string> m = {{1, "one"}, {2, "two"}};
    m[3] = "three"; // Insert
    m.erase(2); // Erase element with key 2
    for (auto& [key, value] : m) // Traverse
        cout << key << ": " << value << "\n";
}

// Queue utilities
void queue_operations() {
    queue<int> q;
    q.push(1); q.push(2); q.push(3); // Push
    q.pop(); // Pop
    cout << "Queue front: " << q.front() << "\n"; // Access front
    cout << "Queue back: " << q.back() << "\n"; // Access back
}

// Stack utilities
void stack_operations() {
    stack<int> st;
    st.push(5); st.push(10); st.push(15); // Push
    st.pop(); // Pop
    cout << "Stack top: " << st.top() << "\n"; // Access top
}

// Priority Queue utilities
void priority_queue_operations() {
    priority_queue<int> pq;
    pq.push(10); pq.push(30); pq.push(20); // Push
    cout << "Priority queue top: " << pq.top() << "\n"; // Access top
    pq.pop(); // Pop
}

// Traversal for various containers
void traversal_example() {
    vi vec = {1, 2, 3, 4};
    set<int> s = {4, 3, 2, 1};
    map<int, string> m = {{1, "one"}, {2, "two"}};

    cout << "Vector: ";
    for (int x : vec) cout << x << " ";
    cout << "\nSet: ";
    for (int x : s) cout << x << " ";
    cout << "\nMap: ";
    for (auto& [k, v] : m) cout << "(" << k << ", " << v << ") ";
    cout << "\n";
}

// Example of usage in main function
int main() {
    fast_io;
    
    cout << "Sorting Examples:\n";
    vi vec = {4, 2, 5, 1};
    sort_vector(vec);
    for (int x : vec) cout << x << " ";
    cout << "\n";

    int arr[] = {3, 1, 4, 1, 5};
    sort_array(arr, 5);
    for (int x : arr) cout << x << " ";
    cout << "\n";
    
    map<int, string> m = {{2, "two"}, {1, "one"}, {3, "three"}};
    vector<pair<int, string>> sorted_by_key = sort_map_by_key(m);
    cout << "Map sorted by key:\n";
    for (auto& [k, v] : sorted_by_key) cout << "(" << k << ", " << v << ") ";
    cout << "\n";

    cout << "String Operations:\n";
    string s = "example";
    string_operations(s);

    cout << "Vector Operations:\n";
    vector_operations();
    
    cout << "Set Operations:\n";
    set_operations();
    
    cout << "Pair Operations:\n";
    pair_operations();

    cout << "Map Operations:\n";
    map_operations();
    
    cout << "Queue Operations:\n";
    queue_operations();
    
    cout << "Stack Operations:\n";
    stack_operations();
    
    cout << "Priority Queue Operations:\n";
    priority_queue_operations();
    
    cout << "Traversal Examples:\n";
    traversal_example();

    return 0;
}
